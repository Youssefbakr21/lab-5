//=====[Libraries]=============================================================

#include "mbed.h"
#include "arm_book_lib.h"

//=====[Defines]===============================================================

#define NUMBER_OF_KEYS                           4
#define BLINKING_TIME_GAS_ALARM               1000
#define BLINKING_TIME_OVER_TEMP_ALARM          500
#define BLINKING_TIME_GAS_AND_OVER_TEMP_ALARM  100
#define NUMBER_OF_AVG_SAMPLES                   100
#define OVER_TEMP_LEVEL                         50
#define TIME_INCREMENT_MS                       10
#define DEBOUNCE_KEY_TIME_MS                    40
#define KEYPAD_NUMBER_OF_ROWS                    4
#define KEYPAD_NUMBER_OF_COLS                    4
#define EVENT_MAX_STORAGE                      100
#define EVENT_NAME_MAX_LENGTH                   14

//=====[Declaration of public data types]======================================

typedef enum {
    MATRIX_KEYPAD_SCANNING,
    MATRIX_KEYPAD_DEBOUNCE,
    MATRIX_KEYPAD_KEY_HOLD_PRESSED
} matrixKeypadState_t;

typedef struct systemEvent {
    time_t seconds;
    char typeOfEvent[EVENT_NAME_MAX_LENGTH];
} systemEvent_t;

//=====[Declaration and initialization of public global objects]===============

DigitalIn alarmTestButton(BUTTON1);
DigitalIn mq2(PE_12);

DigitalOut alarmLed(LED1);
DigitalOut incorrectCodeLed(LED3);
DigitalOut systemBlockedLed(LED2);

DigitalInOut sirenPin(PE_10);

UnbufferedSerial uartUsb(USBTX, USBRX, 115200);

AnalogIn lm35(A1);

DigitalOut keypadRowPins[KEYPAD_NUMBER_OF_ROWS] = {PB_3, PB_5, PC_7, PA_15};
DigitalIn keypadColPins[KEYPAD_NUMBER_OF_COLS]  = {PB_12, PB_13, PB_15, PC_6};

//=====[Declaration and initialization of public global variables]=============

bool alarmState    = OFF;
bool incorrectCode = false;
bool overTempDetector = OFF;
bool alarmActivationMessageSent = false;
bool alarmDeactivationMessageSent = false;

int numberOfIncorrectCodes = 0;
int numberOfHashKeyReleasedEvents = 0;
int keyBeingCompared    = 0;
char codeSequence[NUMBER_OF_KEYS]   = { '1', '8', '0', '5' };
char keyPressed[NUMBER_OF_KEYS] = { '0', '0', '0', '0' };
int accumulatedTimeAlarm = 0;

int lm35SampleIndex      = 0;

char receivedChar = '\0';
char str[100] = "";

bool gasDetectorState          = OFF;
bool overTempDetectorState     = OFF;

float potentiometerReading = 0.0;
float lm35ReadingsAverage  = 0.0;
float lm35ReadingsSum      = 0.0;
float lm35ReadingsArray[NUMBER_OF_AVG_SAMPLES];
float lm35TempC            = 0.0;

int accumulatedDebounceMatrixKeypadTime = 0;
int matrixKeypadCodeIndex = 0;
char matrixKeypadLastKeyPressed = '\0';
char matrixKeypadIndexToCharArray[] = {
    '1', '2', '3', 'A',
    '4', '5', '6', 'B',
    '7', '8', '9', 'C',
    '*', '0', '#', 'D',
};
matrixKeypadState_t matrixKeypadState;

int eventsIndex            = 0;
systemEvent_t arrayOfStoredEvents[EVENT_MAX_STORAGE];

bool showKeypadInUart = false;
bool echoEnabled = true;

//=====[Declarations (prototypes) of public functions]=========================

void inputsInit();
void outputsInit();

void alarmActivationUpdate();
void alarmDeactivationUpdate();

void uartTask();
void availableCommands();
bool areEqual();
void pcSerialComStringWrite( const char* str );
char pcSerialComCharRead();
void pcSerialComStringRead( char* str, int strLength );
void pcSerialComCharWrite( char chr );

void logAlarmActivation();
void logAlarmDeactivation();

float celsiusToFahrenheit( float tempInCelsiusDegrees );
float analogReadingScaledWithTheLM35Formula( float analogReading );
void lm35ReadingsArrayInit();

void matrixKeypadInit();
char matrixKeypadScan();
char matrixKeypadUpdate();

void keypadToUart();

//=====[Main function, the program entry point after power on or reset]========

int main()
{
    inputsInit();
    outputsInit();
    
    pcSerialComStringWrite("\r\n======= Alarm System =======\r\n");
    pcSerialComStringWrite("Enter code using keypad to deactivate alarm: ");
    pcSerialComStringWrite("Current code: ");
    for (int i = 0; i < NUMBER_OF_KEYS; i++) {
        pcSerialComCharWrite(codeSequence[i]);
    }
    pcSerialComStringWrite("\r\n\r\n");
    
    while (true) {
        alarmActivationUpdate();
        alarmDeactivationUpdate();
        uartTask();
        keypadToUart();
        delay(TIME_INCREMENT_MS);
    }
}

//=====[Implementations of public functions]===================================

void inputsInit()
{
    lm35ReadingsArrayInit();
    alarmTestButton.mode(PullDown);
    sirenPin.mode(OpenDrain);
    sirenPin.input();
    matrixKeypadInit();
}

void outputsInit()
{
    alarmLed = OFF;
    incorrectCodeLed = OFF;
    systemBlockedLed = OFF;
}

void logAlarmActivation() {
    if (eventsIndex < EVENT_MAX_STORAGE) {
        arrayOfStoredEvents[eventsIndex].seconds = time(NULL);
        strcpy(arrayOfStoredEvents[eventsIndex].typeOfEvent, "ALARM_ACTIVATED");
        eventsIndex++;
    }
}

void logAlarmDeactivation() {
    if (eventsIndex < EVENT_MAX_STORAGE) {
        arrayOfStoredEvents[eventsIndex].seconds = time(NULL);
        strcpy(arrayOfStoredEvents[eventsIndex].typeOfEvent, "ALARM_DEACTIVATED");
        eventsIndex++;
    }
}

void alarmActivationUpdate()
{
    static bool previousAlarmState = OFF;
    
    int i = 0;

    lm35ReadingsArray[lm35SampleIndex] = lm35.read();
    lm35SampleIndex++;
    if ( lm35SampleIndex >= NUMBER_OF_AVG_SAMPLES) {
        lm35SampleIndex = 0;
    }
    
    lm35ReadingsSum = 0.0;
    for (i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) {
        lm35ReadingsSum = lm35ReadingsSum + lm35ReadingsArray[i];
    }
    lm35ReadingsAverage = lm35ReadingsSum / NUMBER_OF_AVG_SAMPLES;
    lm35TempC = analogReadingScaledWithTheLM35Formula ( lm35ReadingsAverage );    
    
    if ( lm35TempC > OVER_TEMP_LEVEL ) {
        overTempDetector = ON;
    } else {
        overTempDetector = OFF;
    }

    if( !mq2 ) {                      
        gasDetectorState = ON;
        alarmState = ON;
    }
    
    if( overTempDetector ) {
        overTempDetectorState = ON;
        alarmState = ON;
    }
    
    if( alarmTestButton ) {             
        overTempDetectorState = ON;
        gasDetectorState = ON;
        alarmState = ON;
    }
    
    if (alarmState && !previousAlarmState) {
        logAlarmActivation();
        // Send alarm activation message with timestamp
        time_t currentTime = time(NULL);
        str[0] = '\0';
        sprintf(str, "\r\nALARM TRIGGERED - Time: %s", ctime(&currentTime));
        pcSerialComStringWrite(str);
        alarmActivationMessageSent = true;
        alarmDeactivationMessageSent = false;
    }
    
    if (!alarmState && previousAlarmState) {
        logAlarmDeactivation();
        // Send alarm deactivation message with timestamp
        time_t currentTime = time(NULL);
        str[0] = '\0';
        sprintf(str, "\r\nALARM DEACTIVATED - Time: %s", ctime(&currentTime));
        pcSerialComStringWrite(str);
        alarmDeactivationMessageSent = true;
        alarmActivationMessageSent = false;
    }
    
    previousAlarmState = alarmState;
    
    if( alarmState ) { 
        accumulatedTimeAlarm = accumulatedTimeAlarm + TIME_INCREMENT_MS;
        sirenPin.output();                                     
        sirenPin = LOW;                                        
    
        if( gasDetectorState && overTempDetectorState ) {
            if( accumulatedTimeAlarm >= BLINKING_TIME_GAS_AND_OVER_TEMP_ALARM ) {
                accumulatedTimeAlarm = 0;
                alarmLed = !alarmLed;
            }
        } else if( gasDetectorState ) {
            if( accumulatedTimeAlarm >= BLINKING_TIME_GAS_ALARM ) {
                accumulatedTimeAlarm = 0;
                alarmLed = !alarmLed;
            }
        } else if ( overTempDetectorState ) {
            if( accumulatedTimeAlarm >= BLINKING_TIME_OVER_TEMP_ALARM  ) {
                accumulatedTimeAlarm = 0;
                alarmLed = !alarmLed;
            }
        }
    } else {
        alarmLed = OFF;
        gasDetectorState = OFF;
        overTempDetectorState = OFF;
        sirenPin.input();                                  
    }
}

void alarmDeactivationUpdate()
{
    if (numberOfIncorrectCodes < 5) {
        char keyReleased = matrixKeypadUpdate();
        
        if (keyReleased != '\0') {
            if (showKeypadInUart && keyReleased != '#') {
                pcSerialComStringWrite("\r\nKey pressed for code entry: ");
                pcSerialComCharWrite(keyReleased);
                pcSerialComStringWrite("\r\n");
            }
            
            if (keyReleased != '#') {
                keyPressed[matrixKeypadCodeIndex] = keyReleased;
                if (matrixKeypadCodeIndex >= NUMBER_OF_KEYS - 1) {
                    matrixKeypadCodeIndex = 0;
                } else {
                    matrixKeypadCodeIndex++;
                }
                
                if (!alarmState) {
                    alarmLed = ON;
                    delay(50);
                    alarmLed = OFF;
                }
            }
            
            if (keyReleased == '#') {
                if (incorrectCodeLed) {
                    numberOfHashKeyReleasedEvents++;
                    if (numberOfHashKeyReleasedEvents >= 2) {
                        incorrectCodeLed = OFF;
                        numberOfHashKeyReleasedEvents = 0;
                        matrixKeypadCodeIndex = 0;
                    }
                } else {
                    if (alarmState) {
                        if (areEqual()) {
                            alarmState = OFF;
                            numberOfIncorrectCodes = 0;
                            matrixKeypadCodeIndex = 0;
                            
                            alarmLed = OFF;
                            sirenPin.input();
                            
                            logAlarmDeactivation();
                            
                            for (int i = 0; i < 3; i++) {
                                incorrectCodeLed = ON;
                                delay(100);
                                incorrectCodeLed = OFF;
                                delay(100);
                            }
                            
                            if (showKeypadInUart) {
                                pcSerialComStringWrite("\r\nCorrect code! Alarm deactivated.\r\n");
                            }
                        } else {
                            incorrectCodeLed = ON;
                            numberOfIncorrectCodes++;
                            
                            if (showKeypadInUart) {
                                pcSerialComStringWrite("\r\nIncorrect code! Try again.\r\n");
                                pcSerialComStringWrite("Attempts remaining: ");
                                pcSerialComCharWrite('0' + (5 - numberOfIncorrectCodes));
                                pcSerialComStringWrite("\r\n");
                            }
                        }
                    }
                }
            }
        }
    } else {
        systemBlockedLed = ON;
        
        if (showKeypadInUart) {
            pcSerialComStringWrite("\r\nSystem blocked! Too many incorrect attempts.\r\n");
        }
    }
}

void uartTask()
{
    char receivedChar = '\0';
    receivedChar = pcSerialComCharRead();
    if( receivedChar !=  '\0') {
        switch (receivedChar) {
        case '1':
            pcSerialComStringWrite("\r\nThe alarm is ");
            if (alarmState) {
                pcSerialComStringWrite("activated\r\n");
            } else {
                pcSerialComStringWrite("not activated\r\n");
            }
            break;

        case '2':
            if (!mq2) {
                pcSerialComStringWrite("\r\nGas is being detected\r\n");
            } else {
                pcSerialComStringWrite("\r\nGas is not being detected\r\n");
            }
            break;

        case '3':
            if (overTempDetector) {
                pcSerialComStringWrite("\r\nTemperature is above the maximum level\r\n");
            } else {
                pcSerialComStringWrite("\r\nTemperature is below the maximum level\r\n");
            }
            break;
            
        case '4':
            pcSerialComStringWrite("\r\nPlease enter the four digits numeric code ");
            pcSerialComStringWrite("to deactivate the alarm: ");

            incorrectCode = false;

            for (keyBeingCompared = 0; keyBeingCompared < NUMBER_OF_KEYS; keyBeingCompared++) {
                char enteredChar = pcSerialComCharRead();
                while (enteredChar == '\0') {
                    enteredChar = pcSerialComCharRead();
                }
                pcSerialComCharWrite('*');
                
                if (codeSequence[keyBeingCompared] != enteredChar) {
                    incorrectCode = true;
                }
            }

            if (incorrectCode == false) {
                pcSerialComStringWrite("\r\nThe code is correct\r\n\r\n");
                alarmState = OFF;
                incorrectCodeLed = OFF;
                numberOfIncorrectCodes = 0;
                logAlarmDeactivation();
            } else {
                pcSerialComStringWrite("\r\nThe code is incorrect\r\n\r\n");
                incorrectCodeLed = ON;
                numberOfIncorrectCodes++;
            }
            break;

        case '5':
            pcSerialComStringWrite("\r\nPlease enter the new four digits numeric code ");
            pcSerialComStringWrite("to deactivate the alarm: ");

            for (keyBeingCompared = 0; keyBeingCompared < NUMBER_OF_KEYS; keyBeingCompared++) {
                char enteredChar = pcSerialComCharRead();
                while (enteredChar == '\0') {
                    enteredChar = pcSerialComCharRead();
                }
                codeSequence[keyBeingCompared] = enteredChar;
                pcSerialComCharWrite('*');
            }

            pcSerialComStringWrite("\r\nNew code generated\r\n\r\n");
            break;

        case 'c':
        case 'C':
            str[0] = '\0';
            sprintf(str, "\r\nTemperature: %.2f \xB0 C\r\n", lm35TempC);
            pcSerialComStringWrite(str);
            break;

        case 'f':
        case 'F':
            str[0] = '\0';
            sprintf(str, "\r\nTemperature: %.2f \xB0 F\r\n", celsiusToFahrenheit(lm35TempC));
            pcSerialComStringWrite(str);
            break;

        case 'k':
        case 'K':
            pcSerialComStringWrite("\r\nEnter The Code Sequence Through Keypad:\r\n");
            showKeypadInUart = true;
            break;

        case 'q':
        case 'Q':
            pcSerialComStringWrite("\r\nQuit from command 'k'\r\n");
            showKeypadInUart = false;
            break;

        case 's':
        case 'S':
        {
            struct tm rtcTime;
            char year[5] = {0};
            char month[3] = {0};
            char day[3] = {0};
            char hour[3] = {0};
            char minute[3] = {0};
            char second[3] = {0};
            
            echoEnabled = false;
            
            pcSerialComStringWrite("\r\nType four digits for the current year (YYYY): ");
            for (int i = 0; i < 4; i++) {
                while ((year[i] = pcSerialComCharRead()) == '\0');
                pcSerialComCharWrite(year[i]);
            }
            rtcTime.tm_year = atoi(year) - 1900;
            pcSerialComStringWrite("\r\n");

            pcSerialComStringWrite("Type two digits for the current month (01-12): ");
            for (int i = 0; i < 2; i++) {
                while ((month[i] = pcSerialComCharRead()) == '\0');
                pcSerialComCharWrite(month[i]);
            }
            rtcTime.tm_mon = atoi(month) - 1;
            pcSerialComStringWrite("\r\n");

            pcSerialComStringWrite("Type two digits for the current day (01-31): ");
            for (int i = 0; i < 2; i++) {
                while ((day[i] = pcSerialComCharRead()) == '\0');
                pcSerialComCharWrite(day[i]);
            }
            rtcTime.tm_mday = atoi(day);
            pcSerialComStringWrite("\r\n");

            pcSerialComStringWrite("Type two digits for the current hour (00-23): ");
            for (int i = 0; i < 2; i++) {
                while ((hour[i] = pcSerialComCharRead()) == '\0');
                pcSerialComCharWrite(hour[i]);
            }
            rtcTime.tm_hour = atoi(hour);
            pcSerialComStringWrite("\r\n");

            pcSerialComStringWrite("Type two digits for the current minutes (00-59): ");
            for (int i = 0; i < 2; i++) {
                while ((minute[i] = pcSerialComCharRead()) == '\0');
                pcSerialComCharWrite(minute[i]);
            }
            rtcTime.tm_min = atoi(minute);
            pcSerialComStringWrite("\r\n");

            pcSerialComStringWrite("Type two digits for the current seconds (00-59): ");
            for (int i = 0; i < 2; i++) {
                while ((second[i] = pcSerialComCharRead()) == '\0');
                pcSerialComCharWrite(second[i]);
            }
            rtcTime.tm_sec = atoi(second);
            pcSerialComStringWrite("\r\n");

            echoEnabled = true;
            
            rtcTime.tm_isdst = -1;
            set_time(mktime(&rtcTime));
            pcSerialComStringWrite("Date and time has been set\r\n");
            break;
        }

        case 't':
        case 'T':
            time_t epochSeconds;
            epochSeconds = time(NULL);
            str[0] = '\0';
            sprintf(str, "Date and Time = %s", ctime(&epochSeconds));
            pcSerialComStringWrite(str);
            pcSerialComStringWrite("\r\n");
            break;

        case 'e':
        case 'E':
            pcSerialComStringWrite("\r\nAlarm Event Log:\r\n");
            for (int i = 0; i < eventsIndex; i++) {
                if (strstr(arrayOfStoredEvents[i].typeOfEvent, "ALARM_") != NULL) {
                    str[0] = '\0';
                    sprintf(str, "Event: %s\r\n", arrayOfStoredEvents[i].typeOfEvent);
                    pcSerialComStringWrite(str);
                    str[0] = '\0';
                    sprintf(str, "Time: %s\r\n", ctime(&arrayOfStoredEvents[i].seconds));
                    pcSerialComStringWrite(str);
                    pcSerialComStringWrite("\r\n");
                }
            }
            break;

        default:
            availableCommands();
            break;
        }
    }
}

void availableCommands()
{
    pcSerialComStringWrite("Available commands:\r\n");
    pcSerialComStringWrite("Press '1' to get the alarm state\r\n");
    pcSerialComStringWrite("Press '2' to get the gas detector state\r\n");
    pcSerialComStringWrite("Press '3' to get the over temperature detector state\r\n");
    pcSerialComStringWrite("Press '4' to enter the code sequence via UART\r\n");
    pcSerialComStringWrite("Press '5' to enter a new code\r\n");
    pcSerialComStringWrite("Press 'c' or 'C' to get lm35 reading in Celsius\r\n");
    pcSerialComStringWrite("Press 'f' or 'F' to get lm35 reading in Fahrenheit\r\n");
    pcSerialComStringWrite("Press 'k' or 'K' to show the buttons pressed at the matrix keypad\r\n");
    pcSerialComStringWrite("Press 'q' or 'Q' to quit the k command\r\n");
    pcSerialComStringWrite("Press 's' or 'S' to set the time\r\n");
    pcSerialComStringWrite("Press 't' or 'T' to get the time\r\n");
    pcSerialComStringWrite("Press 'e' or 'E' to get the alarm event log\r\n\r\n");
    pcSerialComStringWrite("Or use the matrix keypad: Enter four digits and press '#' to deactivate alarm\r\n");
    pcSerialComStringWrite("Current code: ");
    for (int i = 0; i < NUMBER_OF_KEYS; i++) {
        pcSerialComCharWrite(codeSequence[i]);
    }
    pcSerialComStringWrite("\r\n\r\n");
}

bool areEqual()
{
    for (int i = 0; i < NUMBER_OF_KEYS; i++) {
        if (codeSequence[i] != keyPressed[i]) {
            return false;
        }
    }
    return true;
}

float analogReadingScaledWithTheLM35Formula(float analogReading)
{
    return (analogReading * 3.3 / 0.01);
}

float celsiusToFahrenheit(float tempInCelsiusDegrees)
{
    return (tempInCelsiusDegrees * 9.0 / 5.0 + 32.0);
}

void lm35ReadingsArrayInit()
{
    for (int i = 0; i < NUMBER_OF_AVG_SAMPLES; i++) {
        lm35ReadingsArray[i] = 0;
    }
}

void matrixKeypadInit()
{
    matrixKeypadState = MATRIX_KEYPAD_SCANNING;
    for (int pinIndex = 0; pinIndex < KEYPAD_NUMBER_OF_COLS; pinIndex++) {
        (keypadColPins[pinIndex]).mode(PullUp);
    }
}

char matrixKeypadScan()
{
    int r = 0;
    int c = 0;
    int i = 0;

    for (r = 0; r < KEYPAD_NUMBER_OF_ROWS; r++) {
        for (i = 0; i < KEYPAD_NUMBER_OF_ROWS; i++) {
            keypadRowPins[i] = ON;
        }

        keypadRowPins[r] = OFF;

        for (c = 0; c < KEYPAD_NUMBER_OF_COLS; c++) {
            if (keypadColPins[c] == OFF) {
                return matrixKeypadIndexToCharArray[r * KEYPAD_NUMBER_OF_ROWS + c];
            }
        }
    }
    return '\0';
}

char matrixKeypadUpdate()
{
    char keyDetected = '\0';
    char keyReleased = '\0';

    switch (matrixKeypadState) {
    case MATRIX_KEYPAD_SCANNING:
        keyDetected = matrixKeypadScan();
        if (keyDetected != '\0') {
            matrixKeypadLastKeyPressed = keyDetected;
            accumulatedDebounceMatrixKeypadTime = 0;
            matrixKeypadState = MATRIX_KEYPAD_DEBOUNCE;
        }
        break;

    case MATRIX_KEYPAD_DEBOUNCE:
        if (accumulatedDebounceMatrixKeypadTime >= DEBOUNCE_KEY_TIME_MS) {
            keyDetected = matrixKeypadScan();
            if (keyDetected == matrixKeypadLastKeyPressed) {
                matrixKeypadState = MATRIX_KEYPAD_KEY_HOLD_PRESSED;
            } else {
                matrixKeypadState = MATRIX_KEYPAD_SCANNING;
            }
        }
        accumulatedDebounceMatrixKeypadTime = accumulatedDebounceMatrixKeypadTime + TIME_INCREMENT_MS;
        break;

    case MATRIX_KEYPAD_KEY_HOLD_PRESSED:
        keyDetected = matrixKeypadScan();
        if (keyDetected != matrixKeypadLastKeyPressed) {
            if (keyDetected == '\0') {
                keyReleased = matrixKeypadLastKeyPressed;
            }
            matrixKeypadState = MATRIX_KEYPAD_SCANNING;
        }
        break;

    default:
        matrixKeypadInit();
        break;
    }
    return keyReleased;
}

void pcSerialComStringWrite(const char* str)
{
    uartUsb.write(str, strlen(str));
}

char pcSerialComCharRead()
{
    char receivedChar = '\0';
    if (uartUsb.readable()) {
        uartUsb.read(&receivedChar, 1);
    }
    return receivedChar;
}

void pcSerialComStringRead(char* str, int strLength)
{
    int strIndex;
    for (strIndex = 0; strIndex < strLength; strIndex++) {
        uartUsb.read(&str[strIndex], 1);
    }
    str[strLength] = '\0';
}

void pcSerialComCharWrite(char chr)
{
    if (echoEnabled) {
        char str[2] = "";
        sprintf(str, "%c", chr);
        uartUsb.write(str, strlen(str));
    }
}

void keypadToUart()
{
    char keyPressed;

    if (showKeypadInUart) {
        keyPressed = matrixKeypadScan();
        if (keyPressed != '\0' && keyPressed != matrixKeypadLastKeyPressed) {
            pcSerialComCharWrite(keyPressed);
        }
        matrixKeypadLastKeyPressed = keyPressed;
    }
}
